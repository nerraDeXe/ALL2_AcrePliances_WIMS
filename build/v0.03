import datetime
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib import style
from tkcalendar import DateEntry
from tkinter import *
import tkinter.messagebox as mb
import tkinter.ttk as ttk
import sv_ttk
from fpdf import FPDF

class AdminApp:
    def __init__(self, root):
        self.connector = sqlite3.connect("AcrePliances.db")
        self.cursor = self.connector.cursor()
        self.connector.execute(
            'CREATE TABLE IF NOT EXISTS Inventory (date DATE, PRODUCT_NAME TEXT, PRODUCT_ID TEXT PRIMARY KEY, '
            'STOCKS INTEGER, CATEGORY VARCHAR(30), QUANTITY INTEGER, PURCHASE_PRICE FLOAT, '
            'SELLING_PRICE FLOAT, LOCATION VARCHAR(50))'
        )
        self.connector.commit()

        self.root = root
        self.root.title('ACREPILLANCE')
        self.root.geometry('1280x850')
        self.root.resizable(0, 0)

        self.setup_variables()
        self.setup_frames()
        self.setup_widgets()
        sv_ttk.set_theme("dark")

        self.list_all_inventory()

    def setup_variables(self):
        self.PRODUCT_NAME = StringVar()
        self.PRODUCT_ID = DoubleVar()
        self.STOCKS = IntVar()
        self.QUANTITY = IntVar()
        self.PURCHASE_PRICE = DoubleVar()
        self.SELLING_PRICE = DoubleVar()
        self.CATEGORY = StringVar(value='Electronics')
        self.LOCATION = StringVar(value='Warehouse A')

    def setup_frames(self):
        self.dashboard_frame = Frame(self.root, bg='#C21A2F')
        self.dashboard_frame.place(relx=0.00, rely=0.00, relwidth=1.00, relheight=0.20)

        self.button_frame = Frame(self.root)
        self.button_frame.place(relx=0.00, rely=0.20, relheight=0.80, relwidth=0.22)

        self.button_frame_inventory = Frame(self.root)
        self.button_frame_inventory.place(relx=0.00, rely=0.20, relheight=0.80, relwidth=0.22)
        self.button_frame_inventory.place_forget()

        self.table_frame = Frame(self.root)
        self.table_frame.place(relx=0.22, rely=0.20, relwidth=0.78, relheight=0.55)
        self.table_frame.place_forget()

        self.data_entry_frame = Frame(self.root)
        self.data_entry_frame.pack()
        self.data_entry_frame.place(relx=0.22, rely=0.75, relwidth=0.78, relheight=0.25)
        self.data_entry_frame.place_forget()

        self.chart_frame = Frame(self.root)
        self.chart_frame.place(relx=0.22, rely=0.20, relwidth=0.78, relheight=0.55)
        self.show_bar_chart()

    def setup_widgets(self):
        self.setup_data_entry_widgets()
        self.setup_button_widgets()
        self.setup_inventory_button_widgets()
        self.setup_table()

    def setup_data_entry_widgets(self):
        ttk.Label(self.data_entry_frame, text='Date (M/DD/YY)\t:', font=('Gill Sans MT', 13)).place(x=130, y=40)
        self.date = DateEntry(self.data_entry_frame, date=datetime.datetime.now().date(), font=('Gill Sans MT', 13))
        self.date.place(x=300, y=40)

        ttk.Label(self.data_entry_frame, text='Product Name\t:', font=('Gill Sans MT', 13)).place(x=130, y=80)
        ttk.Entry(self.data_entry_frame, font=('Gill Sans MT', 13), width=20, textvariable=self.PRODUCT_NAME).place(
            x=300,
            y=80)

        ttk.Label(self.data_entry_frame, text='Location\t:', font=('Gill Sans MT', 13)).place(x=130, y=120)
        self.location_menu = ttk.OptionMenu(self.data_entry_frame, self.LOCATION,
                                            'Warehouse A', 'Warehouse B', 'Store A', 'Store B')
        self.location_menu.place(x=300, y=120)

        ttk.Label(self.data_entry_frame, text='Stocks\t:', font=('Gill Sans MT', 13)).place(x=130, y=160)
        ttk.Entry(self.data_entry_frame, font=('Gill Sans MT', 13), width=14, textvariable=self.STOCKS).place(x=300,
                                                                                                              y=160)


        ttk.Label(self.data_entry_frame, text='Category\t:', font=('Gill Sans MT', 13)).place(x=580, y=40)
        self.dd1 = ttk.OptionMenu(self.data_entry_frame, self.CATEGORY,
                                  'Electronics', 'Home Appliances', 'Personal Care', 'Homeware')
        self.dd1.place(x=750, y=35)

        ttk.Label(self.data_entry_frame, text='Quantity\t:', font=('Gill Sans MT', 13)).place(x=580, y=80)
        ttk.Entry(self.data_entry_frame, font=('Gill Sans MT', 13), width=14, textvariable=self.QUANTITY).place(x=750,
                                                                                                                y=80)

        ttk.Label(self.data_entry_frame, text='Purchase Price\t:', font=('Gill Sans MT', 13)).place(x=580, y=120)
        ttk.Entry(self.data_entry_frame, font=('Gill Sans MT', 13), width=14, textvariable=self.PURCHASE_PRICE).place(
            x=750,
            y=120)

        ttk.Label(self.data_entry_frame, text='Selling Price\t:', font=('Gill Sans MT', 13)).place(x=580, y=160)
        ttk.Entry(self.data_entry_frame, font=('Gill Sans MT', 13), width=14, textvariable=self.SELLING_PRICE).place(
            x=750,
            y=160)

    def setup_button_widgets(self):
        ttk.Button(self.button_frame, text='User Management', command=self.remove_inventory
                   ).place(x=40, y=35, width=200, height=50)

        ttk.Button(self.button_frame, text='Inventory Management', width=20,
                   command=self.open_inventory_panel).place(x=40, y=135, width=200, height=50)

    def setup_inventory_button_widgets(self):
        ttk.Button(self.button_frame_inventory, text='Add Inventory', command=self.add_inventory, width=20,
                   ).place(x=40, y=35, width=200, height=50)

        ttk.Button(self.button_frame_inventory, text='Delete Inventory', width=20,
                   command=self.remove_inventory).place(x=40, y=135, width=200, height=50)

        ttk.Button(self.button_frame_inventory, text='Clear Fields', width=20,
                   command=self.clear_fields).place(x=40, y=235, width=200, height=50)

        ttk.Button(self.button_frame_inventory, text='Delete All Inventory', width=20,
                   command=self.remove_all_inventory).place(x=40, y=335, width=200, height=50)

        ttk.Button(self.button_frame_inventory, text='View Product\'s Details', width=20,
                   command=self.view_product_details).place(x=40, y=435, width=200, height=50)

        ttk.Button(self.button_frame_inventory, text='Edit Selected Product', command=self.edit_product_details,
                   width=20).place(x=40, y=535, width=200, height=50)

        ttk.Button(self.button_frame_inventory, text='Back', command=self.close_subpanel,
                   width=20).place(x=20, y=630, width=60, height=30)

    def setup_table(self):
        self.table = ttk.Treeview(self.table_frame, selectmode=BROWSE,
                                  columns=('DATE', 'PRODUCT_NAME', 'PRODUCT_ID', 'STOCKS', 'CATEGORY', 'QUANTITY',
                                           'PURCHASE_PRICE', 'SELLING_PRICE', 'LOCATION'))

        X_Scroller = Scrollbar(self.table, orient=HORIZONTAL, command=self.table.xview)
        Y_Scroller = Scrollbar(self.table, orient=VERTICAL, command=self.table.yview)
        X_Scroller.pack(side=BOTTOM, fill=X)
        Y_Scroller.pack(side=RIGHT, fill=Y)

        self.table.config(yscrollcommand=Y_Scroller.set)

        self.table.heading('DATE', text='Date.', anchor=CENTER)
        self.table.heading('PRODUCT_NAME', text='Product Name', anchor=CENTER)
        self.table.heading('PRODUCT_ID', text='Product ID', anchor=CENTER)
        self.table.heading('STOCKS', text='Stocks', anchor=CENTER)
        self.table.heading('CATEGORY', text='Category', anchor=CENTER)
        self.table.heading('QUANTITY', text='Quantity', anchor=CENTER)
        self.table.heading('PURCHASE_PRICE', text='Purchase Price', anchor=CENTER)
        self.table.heading('SELLING_PRICE', text='Selling Price', anchor=CENTER)
        self.table.heading('LOCATION', text='Location', anchor=CENTER)

        self.table.column('#0', width=0, stretch=NO)
        self.table.column('#1', width=135, stretch=NO)
        self.table.column('#2', width=135, stretch=NO)
        self.table.column('#3', width=0, stretch=NO)
        self.table.column('#4', width=200, stretch=NO)
        self.table.column('#5', width=135, stretch=NO)
        self.table.column('#6', width=125, stretch=NO)
        self.table.column('#7', width=125, stretch=NO)
        self.table.column('#8', width=125, stretch=NO)
        self.table.column('#9', width=125, stretch=NO)

        self.table.place(relx=0, rely=0, relheight=1, relwidth=1)

    def open_inventory_panel(self):
        self.button_frame_inventory.place(relx=0.00, rely=0.20, relheight=0.80, relwidth=0.22)
        self.button_frame.place_forget()
        self.table_frame.place(relx=0.22, rely=0.20, relwidth=0.78, relheight=0.55)
        self.data_entry_frame.place(relx=0.22, rely=0.75, relwidth=0.78, relheight=0.25)
        self.chart_frame.place_forget()

    def close_subpanel(self):
        self.button_frame.place(relx=0.00, rely=0.20, relheight=0.80, relwidth=0.22)
        self.button_frame_inventory.place_forget()
        self.table_frame.place_forget()
        self.data_entry_frame.place_forget()
        self.chart_frame.place(relx=0.22, rely=0.20, relwidth=0.78, relheight=0.55)
        self.show_bar_chart()

    def list_all_inventory(self):
        self.table.delete(*self.table.get_children())

        all_data = self.connector.execute('SELECT * FROM Inventory')
        data = all_data.fetchall()

        for values in data:
            self.table.insert('', END, values=values)

    def clear_fields(self):
        today_date = datetime.datetime.now().date()

        self.QUANTITY.set(0)
        self.PRODUCT_NAME.set('PRODUCT NAME')
        self.STOCKS.set(0)
        self.PURCHASE_PRICE.set(0.00)
        self.SELLING_PRICE.set(0.00)
        self.CATEGORY.set('Electronics')
        self.date.set_date(today_date)
        self.table.selection_remove(*self.table.selection())

    def remove_inventory(self):
        if not self.table.selection():
            mb.showerror('No record selected!', 'Please select a record to delete!')
            return

        current_selected_inventory = self.table.item(self.table.focus())
        values_selected = current_selected_inventory['values']

        surety = mb.askyesno('Are you sure?',
                             f'Are you sure that you want to delete the record of {values_selected[2]}')

        if surety:
            self.connector.execute('DELETE FROM Inventory WHERE PRODUCT_ID=?', (values_selected[2],))
            self.connector.commit()

            self.list_all_inventory()
            mb.showinfo('Record deleted successfully!', f'The record of {values_selected[2]} was deleted successfully')

    def remove_all_inventory(self):
        surety = mb.askyesno('Are you sure?', 'Are you sure that you want to delete all the records from the database?',
                             icon='warning')

        if surety:
            self.table.delete(*self.table.get_children())

            self.connector.execute('DELETE FROM Inventory')
            self.connector.commit()

            self.list_all_inventory()
            mb.showinfo('All Records deleted successfully!', 'All the records were deleted successfully')

    def view_product_details(self):
        if not self.table.selection():
            mb.showerror('No record selected!', 'Please select a record to view!')
            return

        current_selected_product = self.table.item(self.table.focus())
        values = current_selected_product['values']

        view_details_window = Toplevel()
        view_details_window.geometry('400x400')
        view_details_window.title(f'Record of {values[1]}')

        Label(view_details_window, text=f"Product Name: {values[1]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Product ID: {values[2]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Stocks: {values[3]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Category: {values[4]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Quantity: {values[5]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Purchase Price: {values[6]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Selling Price: {values[7]}", font=('Gill Sans MT', 13)).pack()
        Label(view_details_window, text=f"Location: {values[8]}", font=('Gill Sans MT', 13)).pack()

    def edit_product_details(self):
        if not self.table.selection():
            mb.showerror('No record selected!', 'Please select a record to edit!')
            return
        else:
            self.data_entry_frame.pack(fill='both', expand=1)
            current_selected_product = self.table.item(self.table.focus())
            values = current_selected_product['values']

            self.PRODUCT_NAME.set(values[1])
            self.STOCKS.set(values[3])
            self.CATEGORY.set(values[4])
            self.QUANTITY.set(values[5])
            self.PURCHASE_PRICE.set(values[6])
            self.SELLING_PRICE.set(values[7])
            self.LOCATION.set(values[8])
            self.date.set_date(datetime.datetime.strptime(values[0], '%Y-%m-%d'))

            self.add_btn = Button(self.data_entry_frame, text='Update record', font='Helvetica 13 bold',
                                  bg='SpringGreen4', command=self.update_record)
            self.add_btn.place(x=270, y=220)


    def generate_pdf_report(self, product_name, product_id, stocks, category, quantity, purchase_price, selling_price, location, date, action):
        pdf = FPDF()
        pdf.add_page()

        # Title
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(200, 10, f'{action} Product Report', ln=True, align='C')

        # Product details
        pdf.set_font('Arial', '', 12)
        pdf.cell(200, 10, f'Date: {date}', ln=True)
        pdf.cell(200, 10, f'Product Name: {product_name}', ln=True)
        pdf.cell(200, 10, f'Product ID: {product_id}', ln=True)
        pdf.cell(200, 10, f'Stocks: {stocks}', ln=True)
        pdf.cell(200, 10, f'Category: {category}', ln=True)
        pdf.cell(200, 10, f'Quantity: {quantity}', ln=True)
        pdf.cell(200, 10, f'Purchase Price: {purchase_price}', ln=True)
        pdf.cell(200, 10, f'Selling Price: {selling_price}', ln=True)
        pdf.cell(200, 10, f'Location: {location}', ln=True)

        # Save the PDF with a dynamic name
        pdf_name = f'{action}_Product_{product_id}.pdf'
        pdf.output(pdf_name)

        mb.showinfo('PDF Report', f'{action} report generated: {pdf_name}')

    def add_inventory(self):
        # Generate product ID based on category
        category_prefix = self.CATEGORY.get()[0].upper()  # Get the first letter of the category
        count = self.cursor.execute('SELECT COUNT(*) FROM Inventory WHERE CATEGORY=?', (self.CATEGORY.get(),)).fetchone()[0]
        product_id = f"{category_prefix}{count + 1:03d}"  # Format product ID with category prefix and padded number

        # Insert data into database
        self.cursor.execute(
            'INSERT INTO Inventory (date, PRODUCT_NAME, PRODUCT_ID, STOCKS, CATEGORY, QUANTITY, PURCHASE_PRICE, SELLING_PRICE, LOCATION) '
            'VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (
                self.date.get_date(), self.PRODUCT_NAME.get(), product_id, self.STOCKS.get(), self.CATEGORY.get(),
                self.QUANTITY.get(), self.PURCHASE_PRICE.get(), self.SELLING_PRICE.get(), self.LOCATION.get()
            )
        )
        self.connector.commit()

        mb.showinfo('Success', 'Inventory added successfully')
        self.list_all_inventory()
        self.clear_fields()

        # Generate PDF report
        self.generate_pdf_report(
            self.PRODUCT_NAME.get(), product_id, self.STOCKS.get(), self.CATEGORY.get(),
            self.QUANTITY.get(), self.PURCHASE_PRICE.get(), self.SELLING_PRICE.get(), self.LOCATION.get(),
            self.date.get_date(), 'Add'
        )

    def update_record(self):
        current_selected_product = self.table.item(self.table.focus())
        contents = current_selected_product['values']

        self.connector.execute(
            'UPDATE Inventory SET date=?, PRODUCT_NAME=?, STOCKS=?, CATEGORY=?, QUANTITY=?, PURCHASE_PRICE=?, '
            'SELLING_PRICE=?, LOCATION=? WHERE PRODUCT_ID=?', (
                self.date.get_date(), self.PRODUCT_NAME.get(), self.STOCKS.get(), self.CATEGORY.get(),
                self.QUANTITY.get(), self.PURCHASE_PRICE.get(), self.SELLING_PRICE.get(), self.LOCATION.get(),
                contents[2])
        )
        self.connector.commit()

        mb.showinfo('Updated successfully', f'The record of {self.PRODUCT_NAME.get()} was updated successfully')
        self.list_all_inventory()

        self.data_entry_frame.pack_forget()

        # Generate PDF report
        self.generate_pdf_report(
            self.PRODUCT_NAME.get(), contents[2], self.STOCKS.get(), self.CATEGORY.get(),
            self.QUANTITY.get(), self.PURCHASE_PRICE.get(), self.SELLING_PRICE.get(), self.LOCATION.get(),
            self.date.get_date(), 'Edit'
        )

    def show_bar_chart(self):
        self.chart_frame.place(relx=0.22, rely=0.20, relwidth=0.78, relheight=0.55)

        all_data = self.connector.execute('SELECT PRODUCT_NAME, STOCKS FROM Inventory')
        data = all_data.fetchall()

        if not data:
            mb.showerror('No Data', 'No data available to display!')
            return

        product_names = [item[0] for item in data]
        stocks = [item[1] for item in data]

        # Apply dark background style
        style.use('dark_background')

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.bar(product_names, stocks, color='skyblue')
        ax.set_xlabel('Product Name', color='white')
        ax.set_ylabel('Stocks', color='white')
        ax.set_title('Inventory Stocks', color='white')

        # Set the tick positions to match the number of products
        ax.set_xticks(range(len(product_names)))
        # Set the tick labels to the product names
        ax.set_xticklabels(product_names, rotation=45, ha='right', color='white')
        ax.tick_params(axis='y', colors='white')  # Set the color of the y-axis ticks

        plt.tight_layout()

        for widget in self.chart_frame.winfo_children():
            widget.destroy()

        canvas = FigureCanvasTkAgg(fig, master=self.chart_frame)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=BOTH, expand=1)




if __name__ == '__main__':
    root = Tk()
    app = AdminApp(root)
    root.mainloop()
